# ************************************************************
# ------- Fixed global change drivers (09-3 + 09-4) -----------
# ************************************************************
# run predictions with variables fixed one by one
# based on 06-0-RF_and_predictions_v2
# Predictions all years ---------------------------------------------------
lc_levs <- levels(model$trainingData$land_cover)
# predict, save rds, (raster), png
# takes ~ 50min
for (iyear in 1992:2013) {
# iyear <- 1992
fixvars <- all_dp
# either use iyear or starting year 1992
st <- stack(purrr::map(predictors, ~glc_get_resamp(.x, iyear, "5-15")))
# rename
names(st) <- predictors
# as.data.frame (~ 30 sec, ~ 2min with na.rm = T)
gridyear <- as.data.frame(st, xy = TRUE, na.rm = T) %>%
mutate(pid = glc_pIDfromXY(x,y))
# land_cover to text
gridyear <- gridyear %>%
mutate(land_cover = glc_LC_num2chr(land_cover)) %>%
filter(land_cover %in% lc_levs) %>%
mutate(land_cover = factor(land_cover))
# mask: update for dynamic mask ---------------------------------------updte
fullmask <- readRDS(paste0(mask_file[scenario_number], "fullmask_df", i, ".rds")) %>% select(pid, mask)
gridyear1 <- gridyear %>% left_join(fullmask, by = "pid") %>%
filter(is.na(mask))  # %>% select(-mask) # include mask does not influence the result
# predict (100 sec)
gridyear1$pred <- predict(model, gridyear1)
if(!dir.exists((folder_file[scenario_number]))){
dir.create(folder_file[scenario_number])
}
if (!dir.exists(here(paste0(folder_name, i ,'_pred_all_vars')))) {
dir.create(here(paste0(folder_name, i ,'_pred_all_vars')))
}
saveRDS(gridyear1, here(paste0(folder_name, i ,'_pred_all_vars'),
paste0("resample", i ,"_all_", iyear, ".rds")))
# using same mask (fulljoin of all 200 runs) -------------------------update
fullmask_fjoin <- readRDS(paste0(mask_file[scenario_number], "fullmask_fjoin", ".rds")) %>% select(pid, mask)
gridyear_fjoin <- gridyear %>% left_join(fullmask_fjoin, by = "pid") %>%
filter(is.na(mask))  # %>% select(-mask) # include mask column does not influence the results
# predict for fjoin (100 sec)
gridyear_fjoin$pred <- predict(model, gridyear_fjoin)
if(!dir.exists((folder_fjoin[scenario_number]))){
dir.create(folder_fjoin[scenario_number])
}
if (!dir.exists(here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars')))) {
dir.create(here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars')))}
saveRDS(gridyear_fjoin, here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars'),
paste0("resample", i ,"_all_", iyear, ".rds")))
print(paste0("*************", iyear, "----------", Sys.time()))
}
print(paste0("resample*************", i, "----------", Sys.time()))
}
scenario_file <- c("resampled_cmic_500_patoine.csv", "resampled_cmic_500_combined.csv")
folder_file <- c("derived/resampe500_patoine_all", "derived/resampe500_combine")
mask_file <- c("derived/mask_patoine_500/", "derived/mask_combine_500/")
# *************************************************************************************
outputs = read.csv(paste0("output/", scenario_file[scenario_number])) %>%
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
# need update
folder_name <- paste0(folder_file[scenario_number], "/resample")
folder_fjoin <- c("derived/resampe500_patoine_fjoin", "derived/resampe500_combine_fjoin")
# need to update the data and output folder
scenario_number = 2 # need update based on scenario
View(outputs)
# need update
folder_name <- paste0(folder_file[scenario_number], "/resample")
folder_fjoin <- c("derived/resampe500_patoine_fjoin", "derived/resampe500_combine_fjoin")
# need to update the data and output folder
scenario_number = 2 # need update based on scenario
outputs$run_number %>% unique() -> output_number
# non-fixed dynamic predictors
all_dp <- c("") # changed by jian
fclim_dp <- c("tmean", "prec")
fLC_dp <- c("ndvi", "land_cover") # original condition
# par setup
cl <- makeCluster(6, outfile = "")
registerDoParallel(cl)
# for (i in 1){
for (i in output_number[1:2]){
predictors <- glc_layers() %>% unname
cmic = outputs %>% filter(run_number == i)
set.seed(202)
model <- train(x = cmic[,predictors],
y = cmic$Cmic,
method = "rf",
importance = TRUE,
tuneGrid = expand.grid(mtry = c(2:4)), # length(predictors) or 2:6
trControl = trainControl(method = "cv",
number = 20,
p = 0.75,
savePredictions = TRUE))
model # most often mtry = 2
# RMSE + R2
model$results %>% as_tibble %>% filter(mtry == model$bestTune %>% unlist) %>% select(RMSE, Rsquared) %>% print
# variable importance
# varImp(model) %>% plot
# varImp(model, scale = FALSE) %>% plot
# ************************************************************
# ------- Fixed global change drivers (09-3 + 09-4) -----------
# ************************************************************
# run predictions with variables fixed one by one
# based on 06-0-RF_and_predictions_v2
# Predictions all years ---------------------------------------------------
lc_levs <- levels(model$trainingData$land_cover)
# predict, save rds, (raster), png
# takes ~ 50min
for (iyear in 1992:2013) {
# iyear <- 1992
fixvars <- all_dp
# either use iyear or starting year 1992
st <- stack(purrr::map(predictors, ~glc_get_resamp(.x, iyear, "5-15")))
# rename
names(st) <- predictors
# as.data.frame (~ 30 sec, ~ 2min with na.rm = T)
gridyear <- as.data.frame(st, xy = TRUE, na.rm = T) %>%
mutate(pid = glc_pIDfromXY(x,y))
# land_cover to text
gridyear <- gridyear %>%
mutate(land_cover = glc_LC_num2chr(land_cover)) %>%
filter(land_cover %in% lc_levs) %>%
mutate(land_cover = factor(land_cover))
# mask: update for dynamic mask ---------------------------------------updte
fullmask <- readRDS(paste0(mask_file[scenario_number], "fullmask_df", i, ".rds")) %>% select(pid, mask)
gridyear1 <- gridyear %>% left_join(fullmask, by = "pid") %>%
filter(is.na(mask))  # %>% select(-mask) # include mask does not influence the result
# predict (100 sec)
gridyear1$pred <- predict(model, gridyear1)
if(!dir.exists((folder_file[scenario_number]))){
dir.create(folder_file[scenario_number])
}
if (!dir.exists(here(paste0(folder_name, i ,'_pred_all_vars')))) {
dir.create(here(paste0(folder_name, i ,'_pred_all_vars')))
}
saveRDS(gridyear1, here(paste0(folder_name, i ,'_pred_all_vars'),
paste0("resample", i ,"_all_", iyear, ".rds")))
# using same mask (fulljoin of all 200 runs) -------------------------update
fullmask_fjoin <- readRDS(paste0(mask_file[scenario_number], "fullmask_fjoin", ".rds")) %>% select(pid, mask)
gridyear_fjoin <- gridyear %>% left_join(fullmask_fjoin, by = "pid") %>%
filter(is.na(mask))  # %>% select(-mask) # include mask column does not influence the results
# predict for fjoin (100 sec)
gridyear_fjoin$pred <- predict(model, gridyear_fjoin)
if(!dir.exists((folder_fjoin[scenario_number]))){
dir.create(folder_fjoin[scenario_number])
}
if (!dir.exists(here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars')))) {
dir.create(here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars')))}
saveRDS(gridyear_fjoin, here(paste0(folder_fjoin[scenario_number], "/resample", i ,'_pred_all_vars'),
paste0("resample", i ,"_all_", iyear, ".rds")))
print(paste0("*************", iyear, "----------", Sys.time()))
}
print(paste0("resample*************", i, "----------", Sys.time()))
}
#*****************************************************************************************
# Calculate and compare temporal trends of all predictions ---------------------------
#*****************************************************************************************
library(raster)
library(tools)
library(sf)
library(tidyverse)
library(here)
library(doParallel)
library(foreach)
library(caret)
library(CAST)
library(cowplot)
library(grid)
library(gridExtra)
library(ggExtra)
library(forcats)
library(magick)
library(biscale)
library(gt)
# library(glcpck)
# install.packages('qdapRegex')
library(qdapRegex)
source(here::here("code/functions.R"))
# par setup
cl <- makeCluster(6, outfile = "")
registerDoParallel(cl)
# calculate cstocks
bulk <- raster(here("geodata/resampled_0p05deg/static/bdod", "bdod_5-15cm_mean_resamp_c2021-02-14_153856.tif"))
cofr <- raster(here("geodata/resampled_0p05deg/static/cfvo", "cfvo_5-15cm_mean_resamp_c2021-02-14_163601.tif"))
# rarea <- raster::area(cofr)
rarea <- readRDS("derived/06-4-area.rds")
rarea <- raster::area(cofr)
st <- stack(bulk, cofr, rarea)
names(st) <- c("bulk", "cofr", "area")
temporal_trend <- function(sdata, var_scenario) {
# load all predictions (~ 2min)
preds <- map_dfr(sdata, readRDS, .id = "year")
# fix year
preds$year <- as.numeric(preds$year) + 1991
# ~ 2 min
bulk_df <- as.data.frame(st, xy = TRUE, na.rm = TRUE)
bulk_df <- bulk_df %>% mutate(pid = glc_pIDfromXY(x, y)) %>%
select(-c(x, y))
preds <- preds %>% left_join(bulk_df, by = "pid")
# stock is in tonnes/ha (weight/area)
# cell_stock is the total weight for the cell in tonnes
preds <- preds %>% mutate(stock = pred * bulk * (1000-cofr) * 12.01 / 10^8,
cell_stock = stock * area * 100)
# remove missing stocks
preds <- preds %>% drop_na(stock)
preds %>% names %>% writeLines
# nest per cell --------------------------------------------------------
prn <- preds %>% select(pid, year, cell_stock, prec, tmean, ndvi, land_cover) %>%
group_by(pid,) %>%
nest %>% ungroup
# remove if missing temporal datapoints
nrow(prn) #2658500
prn <- prn %>% filter(map_lgl(data, ~ nrow(.x) == 22))
nrow(prn) #2596897
jreg <- prn %>% unnest(cols = c(data))
# global temporal trend ---------------------------------------------------
# NOTE cell_stock is in tonnes
glob_sum <- jreg %>% group_by(year) %>%
summarise(cstock = sum(cell_stock))
# mean value cstock
mcs <- glob_sum$cstock %>% mean #4.34 Pg Cmic
glob_sum <- glob_sum %>% mutate(change = cstock - cstock[1],
perc_ch = change / cstock[1] * 100,
ysca = year - 1992)
glob_sum <- glob_sum %>% mutate(mod_fix = "full")
# Calculation global cmstock changes ---------------------------------------
lm(perc_ch ~ ysca, glob_sum) %>% summary() %>% print()
lm(perc_ch ~ ysca, glob_sum) %>% summary() -> lm_model_sum
lm_slope = lm_model_sum$coefficients[2,1]
lm_slope_se = lm_model_sum$coefficients[2,2]
lm_slope_p = lm_model_sum$coefficients[2,4]
outpt_slope = tibble(scenario = var_scenario,
slope = lm_slope,
slope_se = lm_slope_se,
slope_p = lm_slope_p,
folder = sdata[1])
return(outpt_slope)
}
list.files(here("derived/resampe500_patoine"),
pattern = c("resample"), full.names = TRUE)
# need update baseed on scenario
output_file <- c("derived/resampe500_patoine", "derived/resampe500_patoine_fjoin",
"derived/resampe500_combine", "derived/resampe500_combine_fjoin")
list.files(here(output_file[1]),
pattern = c("resample"), full.names = TRUE)
scenario_number
# need update baseed on scenario
# note that vmask_output are outputs for runs with different mask
vmask_output <- c("derived/resampe500_patoine", "derived/resampe500_combine")
# fjoin_output are outputs for runs with uniform full joined mask
fjoin_output <- c("derived/resampe500_patoine_fjoin", "derived/resampe500_combine_fjoin")
scenario_number <- 1
list.files(here(vmask_output[scenario_number]),
pattern = c("resample"), full.names = TRUE)
folder_list
list.files(here(vmask_output[scenario_number]),
pattern = c("resample"), full.names = TRUE) -> folder_list
folder_list
length(folder_list)
resample_lm_output = tibble(scenario = NA,
slope = NA,
slope_se = NA,
slope_p = NA,
folder = NA)
for (i in 1:length(folder_list)){
list.files(folder_list[i], pattern = c("_all_.+rds"), full.names = TRUE) -> pred_files
temporal_trend(pred_files, "fixed_no_var") -> resample_lm_output_i
resample_lm_output = bind_rows(resample_lm_output, resample_lm_output_i)
print(paste0("resample", "**************", i))
}
resample_lm_output
resample_lm_output %>%
filter(!is.a(slope)) %>%
ggplot(aes(x = slope)) +
geom_histogram(bins = 30, color="black", fill="white")
resample_lm_output %>%
filter(!is.na(slope)) %>%
ggplot(aes(x = slope)) +
geom_histogram(bins = 30, color="black", fill="white")
resample_lm_output %>%
filter(!is.na(slope))
mean(resample_lm_output$slope, na.rm = T)
resample_lm_output2 <- resample_lm_output %>% filter(!is.na(slope))
resample_lm_output2
resample_lm_output2$folder
scenario_file <- c("resampled_cmic_500_patoine.csv", "resampled_cmic_500_combined.csv")
read.csv(past0("output/", scenario_file[scenario_number]))
read.csv(paste0("output/", scenario_file[scenario_number]))
scenario_file[scenario_number]
outputs = read.csv(paste0("output/", scenario_file[scenario_number])) %>%  # need update
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
outputs
outputs %>%
mutate(outslope = Slope) %>%
select(run_number, outslope) %>%
unique() -> optput_lm_slope
optput_lm_slope
resample_lm_output2$folder
here()
here(paste0(scenario_file, '_pred_all_vars'))
scenario_file
here(paste0(folder_file[scenario_number], '_pred_all_vars'))
folder_file[scenario_number]
folder_file
folder_file
folder_file <- c("derived/resampe500_patoine", "derived/resampe500_combine")
folder_file
folder_file[scenario_number]
here(paste0(folder_file[scenario_number], '_pred_all_vars'))
here(paste0(folder_file[scenario_number]))
resample_lm_output2$folder
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number])),
'_pred_all_vars', extract=TRUE)
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number],"/")),
'_pred_all_vars', extract=TRUE)
here(paste0(folder_file[scenario_number],"/"))
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"/"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$folder
unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number]),"/"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number = unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number]),"/"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"/"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$folder
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"/resample"),
'_pred_all_vars', extract=TRUE)
paste0(folder_file[scenario_number]),"/resample")
paste0(folder_file[scenario_number]),"/resample")
here(paste0(folder_file[scenario_number]),"/resample")
here(paste0(folder_file[scenario_number]),"resample")
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"resample"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$run_number = unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number]),"resample"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number
resample_lm_output2$run_number <- as.numeric(resample_lm_output2$run_number)
resample_lm_output2 %>%
left_join(optput_lm_slope, by = "run_number")
resample_lm_output2 %>%
left_join(optput_lm_slope, by = "run_number") -> resample_lm_output2
resample_lm_output2
summary(lm(resample_lm_output2$slope ~ resample_lm_output2$outslope))
resample_lm_output2
list.files(here(fjoin_output[scenario_number]),
pattern = c("resample"), full.names = TRUE)
# all resample runs with a same mask ******************************************
list.files(here(fjoin_output[scenario_number]),
pattern = c("resample"), full.names = TRUE) -> folder_list
folder_list
resample_lm_output = tibble(scenario = NA,
slope = NA,
slope_se = NA,
slope_p = NA,
folder = NA)
resample_lm_output2
resample_lm_output = tibble(scenario = NA,
slope = NA,
slope_se = NA,
slope_p = NA,
folder = NA)
resample_lm_output
length(folder_list)
i
list.files(folder_list[i], pattern = c("_all_.+rds"), full.names = TRUE)
temporal_trend
for (i in 1:length(folder_list)){
list.files(folder_list[i], pattern = c("_all_.+rds"), full.names = TRUE) -> pred_files
temporal_trend(pred_files, "fixed_no_var") -> resample_lm_output_i
resample_lm_output = bind_rows(resample_lm_output, resample_lm_output_i)
print(paste0("resample", "**************", i))
}
resample_lm_output %>%
filter(!is.na(slope)) %>%
ggplot(aes(x = slope)) +
geom_histogram(bins = 30, color="black", fill="white")
resample_lm_output %>%
filter(!is.na(slope))
mean(resample_lm_output$slope, na.rm = T)
resample_lm_output2 <- resample_lm_output %>% filter(!is.na(slope))
resample_lm_output2$folder
scenario_file[scenario_number]
outputs = read.csv(paste0("output/", scenario_file[scenario_number])) %>%  # need update
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
outputs %>%
mutate(outslope = Slope) %>%
select(run_number, outslope) %>%
unique() -> optput_lm_slope
optput_lm_slope
resample_lm_output2$folder
folder_file
here(paste0(folder_file[scenario_number]),"resample")
here(paste0(folder_file[scenario_number], "_fjoin"),"resample")
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number], "_fjoin"),"resample"),
'_pred_all_vars', extract=TRUE)
unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number], "_fjoin"),"resample"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number = unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number], "_fjoin"),"resample"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number
resample_lm_output2$run_number <- as.numeric(resample_lm_output2$run_number)
resample_lm_output2 %>%
left_join(optput_lm_slope, by = "run_number") -> resample_lm_output2
resample_lm_output2
#*******************************************************************************
# scenario 2: combine ---------------------------
#*******************************************************************************
scenario_number <- 2
list.files(here(vmask_output[scenario_number]),
pattern = c("resample"), full.names = TRUE)
# each resample run with diffirent mask ****************************************
list.files(here(vmask_output[scenario_number]),
pattern = c("resample"), full.names = TRUE) -> folder_list
folder_list
resample_lm_output = tibble(scenario = NA,
slope = NA,
slope_se = NA,
slope_p = NA,
folder = NA)
for (i in 1:length(folder_list)){
list.files(folder_list[i], pattern = c("_all_.+rds"), full.names = TRUE) -> pred_files
temporal_trend(pred_files, "fixed_no_var") -> resample_lm_output_i
resample_lm_output = bind_rows(resample_lm_output, resample_lm_output_i)
print(paste0("resample", "**************", i))
}
resample_lm_output %>%
filter(!is.na(slope)) %>%
ggplot(aes(x = slope)) +
geom_histogram(bins = 30, color="black", fill="white")
mean(resample_lm_output$slope, na.rm = T)
resample_lm_output %>% filter(!is.na(slope))
resample_lm_output2 <- resample_lm_output %>% filter(!is.na(slope))
resample_lm_output2$folder
read.csv(paste0("output/", scenario_file[scenario_number])) %>%  # need update
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
outputs = read.csv(paste0("output/", scenario_file[scenario_number])) %>%  # need update
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
outputs %>%
mutate(outslope = Slope) %>%
select(run_number, outslope) %>%
unique() -> optput_lm_slope
optput_lm_slope
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"resample"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$folder
here(paste0(folder_file[scenario_number])
,"resample")
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number]),"resample"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$run_number = unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number]),"resample"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number <- as.numeric(resample_lm_output2$run_number)
resample_lm_output2$run_number
resample_lm_output2 %>%
left_join(optput_lm_slope, by = "run_number") -> resample_lm_output2
resample_lm_output2
list.files(here(fjoin_output[scenario_number]),
pattern = c("resample"), full.names = TRUE)
# all resample runs with a same mask ******************************************
list.files(here(fjoin_output[scenario_number]),
pattern = c("resample"), full.names = TRUE) -> folder_list
resample_lm_output = tibble(scenario = NA,
slope = NA,
slope_se = NA,
slope_p = NA,
folder = NA)
for (i in 1:length(folder_list)){
list.files(folder_list[i], pattern = c("_all_.+rds"), full.names = TRUE) -> pred_files
temporal_trend(pred_files, "fixed_no_var") -> resample_lm_output_i
resample_lm_output = bind_rows(resample_lm_output, resample_lm_output_i)
print(paste0("resample", "**************", i))
}
resample_lm_output %>%
filter(!is.na(slope)) %>%
ggplot(aes(x = slope)) +
geom_histogram(bins = 30, color="black", fill="white")
mean(resample_lm_output$slope, na.rm = T)
resample_lm_output2 <- resample_lm_output %>% filter(!is.na(slope))
resample_lm_output2$folder
outputs = read.csv(paste0("output/", scenario_file[scenario_number])) %>%  # need update
mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S"))) %>%
mutate(tmean = (tmean+273)*10)
outputs %>%
mutate(outslope = Slope) %>%
select(run_number, outslope) %>%
unique() -> optput_lm_slope
optput_lm_slope
# need update
rm_between(resample_lm_output2$folder, here(paste0(folder_file[scenario_number], "_fjoin"),"resample"),
'_pred_all_vars', extract=TRUE)
resample_lm_output2$run_number =
unlist(rm_between(resample_lm_output2$folder,
here(paste0(folder_file[scenario_number], "_fjoin"),"resample"),
'_pred_all_vars', extract=TRUE))
resample_lm_output2$run_number <- as.numeric(resample_lm_output2$run_number)
resample_lm_output2 %>%
left_join(optput_lm_slope, by = "run_number") -> resample_lm_output2
resample_lm_output2
