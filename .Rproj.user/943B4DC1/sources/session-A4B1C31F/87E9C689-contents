
#*****************************************************************************************
# Use old version caret and CAST to avoid error:
# install.packages("packageHistory")
# library(packageHistory)
# packageHistory(package = "CAST", check.package = TRUE)

# remove.packages('CAST')
# remove.packages('caret')
# require(devtools)
# install_version("CAST", version = "0.5.1", repos = "http://cran.us.r-project.org")
# install_version("caret", version = "6.0-90", repos = "http://cran.us.r-project.org")

# need restart R
#*****************************************************************************************

# date: 2022-06-15
# author: jinshi jian <jinshi@vt.edu>
# adapted from Guillaume Patoine <guillaume.patoine@idiv.de>
# description: This is the script related to the publication "Drivers and trends 
# of global soil microbial carbon over two decades".

# The project uses the following folder structure
#
# project_root
# ├─ code 
# ├─ derived 
# ├─ geodata
# ├─ output
# │   ├─ figures
# │   └─ tables
# └─ rawdata

# NOTE some of the functions require additional datasets that are not provided
# in this repository, dur to space limitation. For example, `glc_get_resamp()`
# is a convenience function to load a raster layer, based on the variable name,
# year and soil depth. Code sections based on that function won't work, unless
# these layers are available.

# Load packages -----------------------------------------------------------

library(raster)
library(tools)
library(sf)
library(tidyverse)
library(here)
library(doParallel)
library(foreach)
library(caret)
library(CAST)
library(cowplot)
library(grid)
library(gridExtra)
library(ggExtra)
library(forcats)
library(magick)
library(biscale)
library(gt)
# library(glcpck)

# The packages below need to be installed, but do no need to be loaded.
# The needed functions are called directly using ::
# library(readxl)
# library(fasterize)


# source functions from other script --------------------------
source(here::here("code/functions.R"))

# figure dimensions and default theme
gg_width = 11
gg_height = 5.7
ggplot2::theme_set(ggplot2::theme_bw())


# ************************************************************
# ---------------- Random forest model (06-1) all scenario --
# ************************************************************
#start--------------------------------------------------------
outputs = read.csv("output/resampled_cmic_500_combined.csv") %>% 
  mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S")))

outputs$Slope %>% unique() -> output_slope
# non-fixed dynamic predictors
all_dp <- c("") # changed by jian
fclim_dp <- c("tmean", "prec") 
fLC_dp <- c("ndvi", "land_cover") # original condition
# fLC_temp <- c("ndvi", "land_cover", "prec") # changed by jian
folder_name <- "derived/resampe500_combine/resample"

# par setup 
cl <- makeCluster(5, outfile = "")
registerDoParallel(cl)

for (i in 1:length(output_slope)){
  predictors <- glc_layers() %>% unname
  cmic = outputs %>% filter(Slope == output_slope[i])
  set.seed(202)
  
  model <- train(x = cmic[,predictors], 
                 y = cmic$Cmic,
                 method = "rf",
                 importance = TRUE,
                 tuneGrid = expand.grid(mtry = c(2:4)), # length(predictors) or 2:6
                 trControl = trainControl(method = "cv", 
                                          number = 20,
                                          p = 0.75,
                                          savePredictions = TRUE))
  
  model # most often mtry = 2
  
  # RMSE + R2
  model$results %>% as_tibble %>% filter(mtry == model$bestTune %>% unlist) %>% select(RMSE, Rsquared) %>% print
  # variable importance
  # varImp(model) %>% plot
  # varImp(model, scale = FALSE) %>% plot
  
  # ************************************************************
  # ------- Fixed global change drivers (09-3 + 09-4) -----------
  # ************************************************************
  
  # run predictions with variables fixed one by one
  # based on 06-0-RF_and_predictions_v2
  
  # Predictions all years ---------------------------------------------------
  
  lc_levs <- levels(model$trainingData$land_cover)
  
  # predict, save rds, (raster), png
  # takes ~ 50min
  for (iyear in 1992:2013) {
    # iyear <- 1992
    
    fixvars <- all_dp
    
    # either use iyear or starting year 1992
    st <- stack(purrr::map(predictors, ~glc_get_resamp(.x, iyear, "5-15")))
    
    # rename
    names(st) <- predictors
    
    # as.data.frame (~ 30 sec, ~ 2min with na.rm = T)
    gridyear <- as.data.frame(st, xy = TRUE, na.rm = T) %>%
      mutate(pid = glc_pIDfromXY(x,y))
    
    # land_cover to text
    gridyear <- gridyear %>% 
      mutate(land_cover = glc_LC_num2chr(land_cover)) %>% 
      filter(land_cover %in% lc_levs) %>% 
      mutate(land_cover = factor(land_cover))
    
    # mask
    fullmask <- glc_fullmask_df() %>% select(pid, mask)
    
    gridyear <- gridyear %>% left_join(fullmask, by = "pid") %>% 
      filter(is.na(mask)) %>% select(-mask)
    
    # predict2013 (100 sec)
    gridyear$pred <- predict(model, gridyear)
    
    if (!dir.exists(here(paste0(folder_name, i ,'_pred_all_vars')))) {
      dir.create(here(paste0(folder_name, i ,'_pred_all_vars')))}
    
    saveRDS(gridyear, here(paste0(folder_name, i ,'_pred_all_vars'),
                           paste0("resample", i ,"_all_", iyear, ".rds")))
    
  }
  print(paste0("resample*************",i))
}

#end----------------------------------------------------------
stopCluster(cl)






# ************************************************************
# ---------------- Random forest model (06-1) fixed climate--
# ************************************************************
#start--------------------------------------------------------
outputs = read.csv("output/resampled_cmic_500_combined.csv") %>% 
  mutate(land_cover = factor(land_cover, levels = c("C", "FB", "FC", "FT", "G", "S")))

outputs$Slope %>% unique() -> output_slope
# non-fixed dynamic predictors
all_dp <- c("") # changed by jian
fclim_dp <- c("tmean", "prec") 
fLC_dp <- c("ndvi", "land_cover") # original condition
# fLC_temp <- c("ndvi", "land_cover", "prec") # changed by jian
folder_name <- "derived/resampe500_combine_fclim/resample"

# par setup 
cl <- makeCluster(5, outfile = "")
registerDoParallel(cl)

for (i in 1:length(output_slope)){
  predictors <- glc_layers() %>% unname
  cmic = outputs %>% filter(Slope == output_slope[i])
  set.seed(202)
  
  model <- train(x = cmic[,predictors], 
                 y = cmic$Cmic,
                 method = "rf",
                 importance = TRUE,
                 tuneGrid = expand.grid(mtry = c(2:4)), # length(predictors) or 2:6
                 trControl = trainControl(method = "cv", 
                                          number = 20,
                                          p = 0.75,
                                          savePredictions = TRUE))
  
  model # most often mtry = 2
  
  # RMSE + R2
  model$results %>% as_tibble %>% filter(mtry == model$bestTune %>% unlist) %>% select(RMSE, Rsquared) %>% print
  # variable importance
  # varImp(model) %>% plot
  # varImp(model, scale = FALSE) %>% plot
  
  # ************************************************************
  # ------- Fixed global change drivers (09-3 + 09-4) -----------
  # ************************************************************
  
  # run predictions with variables fixed one by one
  # based on 06-0-RF_and_predictions_v2
  
  # Predictions all years ---------------------------------------------------
  
  lc_levs <- levels(model$trainingData$land_cover)
  
  # predict, save rds, (raster), png
  # takes ~ 50min
  for (iyear in 1992:2013) {
    # iyear <- 1992
    
    fixvars <- fclim_dp
    
    # either use iyear or starting year 1992
    # st <- stack(purrr::map(predictors, ~glc_get_resamp(.x, iyear, "5-15"))) # all scenario
    st <- stack(c(purrr::map(predictors[!predictors %in% fixvars], ~glc_get_resamp(.x, iyear, "5-15")),
                  map(fixvars, ~glc_get_resamp(.x, 1992, "5-15"))))
    
    # rename
    names(st) <- predictors
    
    # as.data.frame (~ 30 sec, ~ 2min with na.rm = T)
    gridyear <- as.data.frame(st, xy = TRUE, na.rm = T) %>%
      mutate(pid = glc_pIDfromXY(x,y))
    
    # land_cover to text
    gridyear <- gridyear %>% 
      mutate(land_cover = glc_LC_num2chr(land_cover)) %>% 
      filter(land_cover %in% lc_levs) %>% 
      mutate(land_cover = factor(land_cover))
    
    # mask
    fullmask <- glc_fullmask_df() %>% select(pid, mask)
    
    gridyear <- gridyear %>% left_join(fullmask, by = "pid") %>% 
      filter(is.na(mask)) %>% select(-mask)
    
    # predict2013 (100 sec)
    gridyear$pred <- predict(model, gridyear)
    
    if (!dir.exists(here(paste0(folder_name, i ,'_pred_f_clim')))) {
      dir.create(here(paste0(folder_name, i ,'_pred_f_clim')))}
    
    saveRDS(gridyear, here(paste0(folder_name, i ,'_pred_f_clim'),
                           paste0("resample", i ,"_fclim_", iyear, ".rds")))
    
  }
  print(paste0("resample*************",i))
}

#end----------------------------------------------------------
stopCluster(cl)



